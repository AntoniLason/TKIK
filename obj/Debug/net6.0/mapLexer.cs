//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\Programowanie\PlayingWithANTLR\TKIK\TKIK\Language\map.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TKIK.Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class mapLexer : Lexer {
	public const int
		ROADTYPE=1, POINT=2, INTEGER=3, DIGIT=4, IDENTIFIER=5, WHITESPACE=6, NEWLINE=7;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"HIGHWAY", "EXPRESSWAY", "TRUNKROAD", "REGIONALROAD", "COUNTRYROAD", "ROADTYPE", 
		"POINT", "INTEGER", "DIGIT", "IDENTIFIER", "WHITESPACE", "NEWLINE"
	};


	public mapLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ROADTYPE", "POINT", "INTEGER", "DIGIT", "IDENTIFIER", "WHITESPACE", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "map.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\t\xBA\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2*\n\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3@\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4T\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5n\n\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x86\n"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x8D\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x5\b\x99\n\b\x3\t\x5\t\x9C\n\t\x3\t\x6\t\x9F\n"+
		"\t\r\t\xE\t\xA0\x3\n\x3\n\x3\v\x3\v\a\v\xA7\n\v\f\v\xE\v\xAA\v\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\r\x5\r\xB1\n\r\x3\r\x3\r\x6\r\xB5\n\r\r\r\xE\r\xB6"+
		"\x3\r\x3\r\x2\x2\x2\xE\x3\x2\x2\x5\x2\x2\a\x2\x2\t\x2\x2\v\x2\x2\r\x2"+
		"\x3\xF\x2\x4\x11\x2\x5\x13\x2\x6\x15\x2\a\x17\x2\b\x19\x2\t\x3\x2\x5\x3"+
		"\x2\x32;\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\xC4\x2"+
		"\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2"+
		"\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x3)\x3\x2\x2"+
		"\x2\x5?\x3\x2\x2\x2\aS\x3\x2\x2\x2\tm\x3\x2\x2\x2\v\x85\x3\x2\x2\x2\r"+
		"\x8C\x3\x2\x2\x2\xF\x98\x3\x2\x2\x2\x11\x9B\x3\x2\x2\x2\x13\xA2\x3\x2"+
		"\x2\x2\x15\xA4\x3\x2\x2\x2\x17\xAB\x3\x2\x2\x2\x19\xB4\x3\x2\x2\x2\x1B"+
		"\x1C\aJ\x2\x2\x1C\x1D\aK\x2\x2\x1D\x1E\aI\x2\x2\x1E\x1F\aJ\x2\x2\x1F "+
		"\aY\x2\x2 !\a\x43\x2\x2!*\a[\x2\x2\"#\aj\x2\x2#$\ak\x2\x2$%\ai\x2\x2%"+
		"&\aj\x2\x2&\'\ay\x2\x2\'(\a\x63\x2\x2(*\a{\x2\x2)\x1B\x3\x2\x2\x2)\"\x3"+
		"\x2\x2\x2*\x4\x3\x2\x2\x2+,\aG\x2\x2,-\aZ\x2\x2-.\aR\x2\x2./\aT\x2\x2"+
		"/\x30\aG\x2\x2\x30\x31\aU\x2\x2\x31\x32\aU\x2\x2\x32\x33\aY\x2\x2\x33"+
		"\x34\a\x43\x2\x2\x34@\a[\x2\x2\x35\x36\ag\x2\x2\x36\x37\az\x2\x2\x37\x38"+
		"\ar\x2\x2\x38\x39\at\x2\x2\x39:\ag\x2\x2:;\au\x2\x2;<\au\x2\x2<=\ay\x2"+
		"\x2=>\a\x63\x2\x2>@\a{\x2\x2?+\x3\x2\x2\x2?\x35\x3\x2\x2\x2@\x6\x3\x2"+
		"\x2\x2\x41\x42\aV\x2\x2\x42\x43\aT\x2\x2\x43\x44\aW\x2\x2\x44\x45\aP\x2"+
		"\x2\x45\x46\aM\x2\x2\x46G\aT\x2\x2GH\aQ\x2\x2HI\a\x43\x2\x2IT\a\x46\x2"+
		"\x2JK\av\x2\x2KL\at\x2\x2LM\aw\x2\x2MN\ap\x2\x2NO\am\x2\x2OP\at\x2\x2"+
		"PQ\aq\x2\x2QR\a\x63\x2\x2RT\a\x66\x2\x2S\x41\x3\x2\x2\x2SJ\x3\x2\x2\x2"+
		"T\b\x3\x2\x2\x2UV\aT\x2\x2VW\aG\x2\x2WX\aI\x2\x2XY\aK\x2\x2YZ\aQ\x2\x2"+
		"Z[\aP\x2\x2[\\\a\x43\x2\x2\\]\aN\x2\x2]^\aT\x2\x2^_\aQ\x2\x2_`\a\x43\x2"+
		"\x2`n\a\x46\x2\x2\x61\x62\at\x2\x2\x62\x63\ag\x2\x2\x63\x64\ai\x2\x2\x64"+
		"\x65\ak\x2\x2\x65\x66\aq\x2\x2\x66g\ap\x2\x2gh\a\x63\x2\x2hi\an\x2\x2"+
		"ij\at\x2\x2jk\aq\x2\x2kl\a\x63\x2\x2ln\a\x66\x2\x2mU\x3\x2\x2\x2m\x61"+
		"\x3\x2\x2\x2n\n\x3\x2\x2\x2op\a\x45\x2\x2pq\aQ\x2\x2qr\aW\x2\x2rs\aP\x2"+
		"\x2st\aV\x2\x2tu\aT\x2\x2uv\a[\x2\x2vw\aT\x2\x2wx\aQ\x2\x2xy\a\x43\x2"+
		"\x2y\x86\a\x46\x2\x2z{\a\x65\x2\x2{|\aq\x2\x2|}\aw\x2\x2}~\ap\x2\x2~\x7F"+
		"\av\x2\x2\x7F\x80\at\x2\x2\x80\x81\a{\x2\x2\x81\x82\at\x2\x2\x82\x83\a"+
		"q\x2\x2\x83\x84\a\x63\x2\x2\x84\x86\a\x66\x2\x2\x85o\x3\x2\x2\x2\x85z"+
		"\x3\x2\x2\x2\x86\f\x3\x2\x2\x2\x87\x8D\x5\x3\x2\x2\x88\x8D\x5\x5\x3\x2"+
		"\x89\x8D\x5\a\x4\x2\x8A\x8D\x5\t\x5\x2\x8B\x8D\x5\v\x6\x2\x8C\x87\x3\x2"+
		"\x2\x2\x8C\x88\x3\x2\x2\x2\x8C\x89\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C"+
		"\x8B\x3\x2\x2\x2\x8D\xE\x3\x2\x2\x2\x8E\x8F\aR\x2\x2\x8F\x90\aQ\x2\x2"+
		"\x90\x91\aK\x2\x2\x91\x92\aP\x2\x2\x92\x99\aV\x2\x2\x93\x94\ar\x2\x2\x94"+
		"\x95\aq\x2\x2\x95\x96\ak\x2\x2\x96\x97\ap\x2\x2\x97\x99\av\x2\x2\x98\x8E"+
		"\x3\x2\x2\x2\x98\x93\x3\x2\x2\x2\x99\x10\x3\x2\x2\x2\x9A\x9C\a/\x2\x2"+
		"\x9B\x9A\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\x3\x2\x2\x2\x9D\x9F\x5"+
		"\x13\n\x2\x9E\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2"+
		"\xA0\xA1\x3\x2\x2\x2\xA1\x12\x3\x2\x2\x2\xA2\xA3\t\x2\x2\x2\xA3\x14\x3"+
		"\x2\x2\x2\xA4\xA8\t\x3\x2\x2\xA5\xA7\t\x4\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7"+
		"\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\x16\x3\x2"+
		"\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAC\a\"\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE"+
		"\b\f\x2\x2\xAE\x18\x3\x2\x2\x2\xAF\xB1\a\xF\x2\x2\xB0\xAF\x3\x2\x2\x2"+
		"\xB0\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB5\a\f\x2\x2\xB3\xB5\a\xF"+
		"\x2\x2\xB4\xB0\x3\x2\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6"+
		"\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\b\r\x2"+
		"\x2\xB9\x1A\x3\x2\x2\x2\x10\x2)?Sm\x85\x8C\x98\x9B\xA0\xA8\xB0\xB4\xB6"+
		"\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TKIK.Language
