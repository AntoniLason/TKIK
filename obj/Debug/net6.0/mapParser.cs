//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\Programowanie\PlayingWithANTLR\TKIK\TKIK\Language\map.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TKIK.Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class mapParser : Parser {
	public const int
		ROADTYPE=1, POINT=2, INTEGER=3, DIGIT=4, IDENTIFIER=5, WHITESPACE=6, NEWLINE=7;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_point = 2, RULE_latitude = 3, RULE_longitude = 4, 
		RULE_road = 5;
	public static readonly string[] ruleNames = {
		"program", "line", "point", "latitude", "longitude", "road"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ROADTYPE", "POINT", "INTEGER", "DIGIT", "IDENTIFIER", "WHITESPACE", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "map.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public mapParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(mapParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ROADTYPE || _la==POINT) {
				{
				{
				State = 12; line();
				}
				}
				State = 17;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 18; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		public RoadContext road() {
			return GetRuleContext<RoadContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 22;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case POINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; point();
				}
				break;
			case ROADTYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; road();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		public ITerminalNode POINT() { return GetToken(mapParser.POINT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(mapParser.IDENTIFIER, 0); }
		public LatitudeContext latitude() {
			return GetRuleContext<LatitudeContext>(0);
		}
		public LongitudeContext longitude() {
			return GetRuleContext<LongitudeContext>(0);
		}
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(POINT);
			State = 25; Match(IDENTIFIER);
			State = 26; latitude();
			State = 27; longitude();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatitudeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(mapParser.INTEGER, 0); }
		public LatitudeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latitude; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLatitude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLatitude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatitude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatitudeContext latitude() {
		LatitudeContext _localctx = new LatitudeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_latitude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongitudeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(mapParser.INTEGER, 0); }
		public LongitudeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longitude; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLongitude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLongitude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongitude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongitudeContext longitude() {
		LongitudeContext _localctx = new LongitudeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_longitude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoadContext : ParserRuleContext {
		public ITerminalNode ROADTYPE() { return GetToken(mapParser.ROADTYPE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(mapParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(mapParser.IDENTIFIER, i);
		}
		public LatitudeContext[] latitude() {
			return GetRuleContexts<LatitudeContext>();
		}
		public LatitudeContext latitude(int i) {
			return GetRuleContext<LatitudeContext>(i);
		}
		public LongitudeContext[] longitude() {
			return GetRuleContexts<LongitudeContext>();
		}
		public LongitudeContext longitude(int i) {
			return GetRuleContext<LongitudeContext>(i);
		}
		public RoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_road; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterRoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitRoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadContext road() {
		RoadContext _localctx = new RoadContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_road);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; Match(ROADTYPE);
				State = 34; Match(IDENTIFIER);
				State = 35; latitude();
				State = 36; longitude();
				State = 37; latitude();
				State = 38; longitude();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; Match(ROADTYPE);
				State = 41; Match(IDENTIFIER);
				State = 42; Match(IDENTIFIER);
				State = 43; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\t\x31\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\a\x2\x10\n"+
		"\x2\f\x2\xE\x2\x13\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x19\n\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a/\n\a\x3\a\x2\x2\x2\b\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\x2\x2-\x2\x11\x3\x2\x2\x2\x4\x18\x3\x2\x2\x2\x6\x1A"+
		"\x3\x2\x2\x2\b\x1F\x3\x2\x2\x2\n!\x3\x2\x2\x2\f.\x3\x2\x2\x2\xE\x10\x5"+
		"\x4\x3\x2\xF\xE\x3\x2\x2\x2\x10\x13\x3\x2\x2\x2\x11\xF\x3\x2\x2\x2\x11"+
		"\x12\x3\x2\x2\x2\x12\x14\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x14\x15\a\x2"+
		"\x2\x3\x15\x3\x3\x2\x2\x2\x16\x19\x5\x6\x4\x2\x17\x19\x5\f\a\x2\x18\x16"+
		"\x3\x2\x2\x2\x18\x17\x3\x2\x2\x2\x19\x5\x3\x2\x2\x2\x1A\x1B\a\x4\x2\x2"+
		"\x1B\x1C\a\a\x2\x2\x1C\x1D\x5\b\x5\x2\x1D\x1E\x5\n\x6\x2\x1E\a\x3\x2\x2"+
		"\x2\x1F \a\x5\x2\x2 \t\x3\x2\x2\x2!\"\a\x5\x2\x2\"\v\x3\x2\x2\x2#$\a\x3"+
		"\x2\x2$%\a\a\x2\x2%&\x5\b\x5\x2&\'\x5\n\x6\x2\'(\x5\b\x5\x2()\x5\n\x6"+
		"\x2)/\x3\x2\x2\x2*+\a\x3\x2\x2+,\a\a\x2\x2,-\a\a\x2\x2-/\a\a\x2\x2.#\x3"+
		"\x2\x2\x2.*\x3\x2\x2\x2/\r\x3\x2\x2\x2\x5\x11\x18.";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TKIK.Language
