//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\Programowanie\PlayingWithANTLR\TKIK\TKIK\Language\map.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TKIK.Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class mapParser : Parser {
	public const int
		EOL=1, WHITESPACE=2, NEWLINE=3, FLOAT=4, INTIGER=5, OPENCURLYBRACKET=6, 
		CLOSECURLYBRACKER=7, COMA=8, ID=9, POINT=10, NORTH=11, EAST=12, WEST=13, 
		SOUTH=14, ROADTYPE=15, BUILDINGTYPE=16, AREATYPE=17, DISCONNECT=18, CONNECT=19;
	public const int
		RULE_usuwaniePrzypisaniaPunktu = 0, RULE_area = 1, RULE_building = 2, 
		RULE_listofpoints = 3, RULE_road = 4, RULE_point = 5, RULE_lat = 6, RULE_long = 7;
	public static readonly string[] ruleNames = {
		"usuwaniePrzypisaniaPunktu", "area", "building", "listofpoints", "road", 
		"point", "lat", "long"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "' '", null, null, null, "'{'", "'}'", "','", null, "'POINT'", 
		null, null, null, null, null, null, null, "'DISCONNECT'", "'CONNECT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "WHITESPACE", "NEWLINE", "FLOAT", "INTIGER", "OPENCURLYBRACKET", 
		"CLOSECURLYBRACKER", "COMA", "ID", "POINT", "NORTH", "EAST", "WEST", "SOUTH", 
		"ROADTYPE", "BUILDINGTYPE", "AREATYPE", "DISCONNECT", "CONNECT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "map.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public mapParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class UsuwaniePrzypisaniaPunktuContext : ParserRuleContext {
		public ITerminalNode DISCONNECT() { return GetToken(mapParser.DISCONNECT, 0); }
		public ITerminalNode ID() { return GetToken(mapParser.ID, 0); }
		public LatContext lat() {
			return GetRuleContext<LatContext>(0);
		}
		public LongContext @long() {
			return GetRuleContext<LongContext>(0);
		}
		public ListofpointsContext listofpoints() {
			return GetRuleContext<ListofpointsContext>(0);
		}
		public UsuwaniePrzypisaniaPunktuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usuwaniePrzypisaniaPunktu; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterUsuwaniePrzypisaniaPunktu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitUsuwaniePrzypisaniaPunktu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsuwaniePrzypisaniaPunktu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsuwaniePrzypisaniaPunktuContext usuwaniePrzypisaniaPunktu() {
		UsuwaniePrzypisaniaPunktuContext _localctx = new UsuwaniePrzypisaniaPunktuContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_usuwaniePrzypisaniaPunktu);
		try {
			State = 24;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; Match(DISCONNECT);
				State = 17; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; Match(DISCONNECT);
				State = 19; lat();
				State = 20; @long();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 22; Match(DISCONNECT);
				State = 23; listofpoints(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AreaContext : ParserRuleContext {
		public ITerminalNode AREATYPE() { return GetToken(mapParser.AREATYPE, 0); }
		public ListofpointsContext listofpoints() {
			return GetRuleContext<ListofpointsContext>(0);
		}
		public AreaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_area; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterArea(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitArea(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArea(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AreaContext area() {
		AreaContext _localctx = new AreaContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_area);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(AREATYPE);
			State = 27; listofpoints(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuildingContext : ParserRuleContext {
		public ITerminalNode BUILDINGTYPE() { return GetToken(mapParser.BUILDINGTYPE, 0); }
		public ListofpointsContext listofpoints() {
			return GetRuleContext<ListofpointsContext>(0);
		}
		public BuildingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_building; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterBuilding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitBuilding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuilding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuildingContext building() {
		BuildingContext _localctx = new BuildingContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_building);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(BUILDINGTYPE);
			State = 30; listofpoints(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListofpointsContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(mapParser.ID, 0); }
		public LatContext lat() {
			return GetRuleContext<LatContext>(0);
		}
		public LongContext @long() {
			return GetRuleContext<LongContext>(0);
		}
		public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		public ListofpointsContext listofpoints() {
			return GetRuleContext<ListofpointsContext>(0);
		}
		public ITerminalNode COMA() { return GetToken(mapParser.COMA, 0); }
		public ITerminalNode EOL() { return GetToken(mapParser.EOL, 0); }
		public ListofpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listofpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterListofpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitListofpoints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListofpoints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListofpointsContext listofpoints() {
		return listofpoints(0);
	}

	private ListofpointsContext listofpoints(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ListofpointsContext _localctx = new ListofpointsContext(_ctx, _parentState);
		ListofpointsContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_listofpoints, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				{
				State = 33; Match(ID);
				}
				break;
			case NORTH:
			case SOUTH:
				{
				State = 34; lat();
				State = 35; @long();
				}
				break;
			case POINT:
				{
				State = 37; point();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 64;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new ListofpointsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_listofpoints);
						State = 40;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 41; Match(COMA);
						State = 42; Match(ID);
						}
						break;

					case 2:
						{
						_localctx = new ListofpointsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_listofpoints);
						State = 43;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 44; Match(COMA);
						State = 45; lat();
						State = 46; @long();
						}
						break;

					case 3:
						{
						_localctx = new ListofpointsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_listofpoints);
						State = 48;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 49; Match(COMA);
						State = 50; point();
						}
						break;

					case 4:
						{
						_localctx = new ListofpointsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_listofpoints);
						State = 51;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 52; Match(EOL);
						State = 53; Match(ID);
						}
						break;

					case 5:
						{
						_localctx = new ListofpointsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_listofpoints);
						State = 54;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 55; Match(EOL);
						State = 56; lat();
						State = 57; @long();
						}
						break;

					case 6:
						{
						_localctx = new ListofpointsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_listofpoints);
						State = 59;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 60; Match(EOL);
						State = 61; point();
						}
						break;
					}
					} 
				}
				State = 66;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RoadContext : ParserRuleContext {
		public ITerminalNode ROADTYPE() { return GetToken(mapParser.ROADTYPE, 0); }
		public PointContext[] point() {
			return GetRuleContexts<PointContext>();
		}
		public PointContext point(int i) {
			return GetRuleContext<PointContext>(i);
		}
		public LatContext[] lat() {
			return GetRuleContexts<LatContext>();
		}
		public LatContext lat(int i) {
			return GetRuleContext<LatContext>(i);
		}
		public LongContext[] @long() {
			return GetRuleContexts<LongContext>();
		}
		public LongContext @long(int i) {
			return GetRuleContext<LongContext>(i);
		}
		public ListofpointsContext listofpoints() {
			return GetRuleContext<ListofpointsContext>(0);
		}
		public RoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_road; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterRoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitRoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadContext road() {
		RoadContext _localctx = new RoadContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_road);
		try {
			State = 79;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; Match(ROADTYPE);
				State = 68; point();
				State = 69; point();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(ROADTYPE);
				State = 72; lat();
				State = 73; @long();
				State = 74; lat();
				State = 75; @long();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77; Match(ROADTYPE);
				State = 78; listofpoints(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		public ITerminalNode POINT() { return GetToken(mapParser.POINT, 0); }
		public ITerminalNode ID() { return GetToken(mapParser.ID, 0); }
		public LatContext lat() {
			return GetRuleContext<LatContext>(0);
		}
		public LongContext @long() {
			return GetRuleContext<LongContext>(0);
		}
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(POINT);
			State = 82; Match(ID);
			State = 83; lat();
			State = 84; @long();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatContext : ParserRuleContext {
		public ITerminalNode NORTH() { return GetToken(mapParser.NORTH, 0); }
		public ITerminalNode INTIGER() { return GetToken(mapParser.INTIGER, 0); }
		public ITerminalNode SOUTH() { return GetToken(mapParser.SOUTH, 0); }
		public LatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatContext lat() {
		LatContext _localctx = new LatContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_lat);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NORTH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(NORTH);
				State = 87; Match(INTIGER);
				}
				break;
			case SOUTH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; Match(SOUTH);
				State = 89; Match(INTIGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongContext : ParserRuleContext {
		public ITerminalNode EAST() { return GetToken(mapParser.EAST, 0); }
		public ITerminalNode INTIGER() { return GetToken(mapParser.INTIGER, 0); }
		public ITerminalNode WEST() { return GetToken(mapParser.WEST, 0); }
		public LongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_long; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLong(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLong(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongContext @long() {
		LongContext _localctx = new LongContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_long);
		try {
			State = 96;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EAST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(EAST);
				State = 93; Match(INTIGER);
				}
				break;
			case WEST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; Match(WEST);
				State = 95; Match(INTIGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return listofpoints_sempred((ListofpointsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool listofpoints_sempred(ListofpointsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);

		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15\x65\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x1B\n\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5)\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\a\x5\x41\n\x5\f\x5\xE\x5\x44\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6R\n\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b]\n\b\x3\t\x3\t\x3\t\x3\t\x5\t\x63"+
		"\n\t\x3\t\x2\x2\x3\b\n\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x2"+
		"\x2j\x2\x1A\x3\x2\x2\x2\x4\x1C\x3\x2\x2\x2\x6\x1F\x3\x2\x2\x2\b(\x3\x2"+
		"\x2\x2\nQ\x3\x2\x2\x2\fS\x3\x2\x2\x2\xE\\\x3\x2\x2\x2\x10\x62\x3\x2\x2"+
		"\x2\x12\x13\a\x14\x2\x2\x13\x1B\a\v\x2\x2\x14\x15\a\x14\x2\x2\x15\x16"+
		"\x5\xE\b\x2\x16\x17\x5\x10\t\x2\x17\x1B\x3\x2\x2\x2\x18\x19\a\x14\x2\x2"+
		"\x19\x1B\x5\b\x5\x2\x1A\x12\x3\x2\x2\x2\x1A\x14\x3\x2\x2\x2\x1A\x18\x3"+
		"\x2\x2\x2\x1B\x3\x3\x2\x2\x2\x1C\x1D\a\x13\x2\x2\x1D\x1E\x5\b\x5\x2\x1E"+
		"\x5\x3\x2\x2\x2\x1F \a\x12\x2\x2 !\x5\b\x5\x2!\a\x3\x2\x2\x2\"#\b\x5\x1"+
		"\x2#)\a\v\x2\x2$%\x5\xE\b\x2%&\x5\x10\t\x2&)\x3\x2\x2\x2\')\x5\f\a\x2"+
		"(\"\x3\x2\x2\x2($\x3\x2\x2\x2(\'\x3\x2\x2\x2)\x42\x3\x2\x2\x2*+\f\b\x2"+
		"\x2+,\a\n\x2\x2,\x41\a\v\x2\x2-.\f\a\x2\x2./\a\n\x2\x2/\x30\x5\xE\b\x2"+
		"\x30\x31\x5\x10\t\x2\x31\x41\x3\x2\x2\x2\x32\x33\f\x6\x2\x2\x33\x34\a"+
		"\n\x2\x2\x34\x41\x5\f\a\x2\x35\x36\f\x5\x2\x2\x36\x37\a\x3\x2\x2\x37\x41"+
		"\a\v\x2\x2\x38\x39\f\x4\x2\x2\x39:\a\x3\x2\x2:;\x5\xE\b\x2;<\x5\x10\t"+
		"\x2<\x41\x3\x2\x2\x2=>\f\x3\x2\x2>?\a\x3\x2\x2?\x41\x5\f\a\x2@*\x3\x2"+
		"\x2\x2@-\x3\x2\x2\x2@\x32\x3\x2\x2\x2@\x35\x3\x2\x2\x2@\x38\x3\x2\x2\x2"+
		"@=\x3\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2"+
		"\x43\t\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\a\x11\x2\x2\x46G\x5\f\a"+
		"\x2GH\x5\f\a\x2HR\x3\x2\x2\x2IJ\a\x11\x2\x2JK\x5\xE\b\x2KL\x5\x10\t\x2"+
		"LM\x5\xE\b\x2MN\x5\x10\t\x2NR\x3\x2\x2\x2OP\a\x11\x2\x2PR\x5\b\x5\x2Q"+
		"\x45\x3\x2\x2\x2QI\x3\x2\x2\x2QO\x3\x2\x2\x2R\v\x3\x2\x2\x2ST\a\f\x2\x2"+
		"TU\a\v\x2\x2UV\x5\xE\b\x2VW\x5\x10\t\x2W\r\x3\x2\x2\x2XY\a\r\x2\x2Y]\a"+
		"\a\x2\x2Z[\a\x10\x2\x2[]\a\a\x2\x2\\X\x3\x2\x2\x2\\Z\x3\x2\x2\x2]\xF\x3"+
		"\x2\x2\x2^_\a\xE\x2\x2_\x63\a\a\x2\x2`\x61\a\xF\x2\x2\x61\x63\a\a\x2\x2"+
		"\x62^\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x11\x3\x2\x2\x2\t\x1A(@\x42Q\\"+
		"\x62";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TKIK.Language
