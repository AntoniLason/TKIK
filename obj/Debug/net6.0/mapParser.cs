//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\Programowanie\PlayingWithANTLR\TKIK\TKIK\Language\map.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TKIK.Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class mapParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, ROADTYPE=4, BUILDINGTYPE=5, AREATYPE=6, POINT=7, 
		INTEGER=8, DIGIT=9, IDENTIFIER=10, CHAR=11, WHITESPACE=12, NEWLINE=13;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_coment = 2, RULE_building = 3, RULE_area = 4, 
		RULE_point = 5, RULE_latitude = 6, RULE_longitude = 7, RULE_road = 8;
	public static readonly string[] ruleNames = {
		"program", "line", "coment", "building", "area", "point", "latitude", 
		"longitude", "road"
	};

	private static readonly string[] _LiteralNames = {
		null, "'//'", "'('", "')'", null, null, null, null, null, null, null, 
		null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ROADTYPE", "BUILDINGTYPE", "AREATYPE", "POINT", 
		"INTEGER", "DIGIT", "IDENTIFIER", "CHAR", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "map.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public mapParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(mapParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ROADTYPE) | (1L << BUILDINGTYPE) | (1L << AREATYPE) | (1L << POINT))) != 0)) {
				{
				{
				State = 18; line();
				}
				}
				State = 23;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		public RoadContext road() {
			return GetRuleContext<RoadContext>(0);
		}
		public BuildingContext building() {
			return GetRuleContext<BuildingContext>(0);
		}
		public AreaContext area() {
			return GetRuleContext<AreaContext>(0);
		}
		public ComentContext coment() {
			return GetRuleContext<ComentContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 31;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case POINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; point();
				}
				break;
			case ROADTYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; road();
				}
				break;
			case BUILDINGTYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 28; building();
				}
				break;
			case AREATYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 29; area();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 5);
				{
				State = 30; coment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComentContext : ParserRuleContext {
		public ITerminalNode[] CHAR() { return GetTokens(mapParser.CHAR); }
		public ITerminalNode CHAR(int i) {
			return GetToken(mapParser.CHAR, i);
		}
		public ComentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterComent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitComent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComentContext coment() {
		ComentContext _localctx = new ComentContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_coment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(T__0);
			State = 37;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CHAR) {
				{
				{
				State = 34; Match(CHAR);
				}
				}
				State = 39;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 40; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuildingContext : ParserRuleContext {
		public ITerminalNode BUILDINGTYPE() { return GetToken(mapParser.BUILDINGTYPE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(mapParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(mapParser.IDENTIFIER, i);
		}
		public BuildingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_building; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterBuilding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitBuilding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuilding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuildingContext building() {
		BuildingContext _localctx = new BuildingContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_building);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(BUILDINGTYPE);
			State = 43; Match(IDENTIFIER);
			State = 44; Match(T__1);
			State = 48;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 45; Match(IDENTIFIER);
				}
				}
				State = 50;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 51; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AreaContext : ParserRuleContext {
		public ITerminalNode AREATYPE() { return GetToken(mapParser.AREATYPE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(mapParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(mapParser.IDENTIFIER, i);
		}
		public AreaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_area; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterArea(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitArea(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArea(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AreaContext area() {
		AreaContext _localctx = new AreaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_area);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(AREATYPE);
			State = 54; Match(IDENTIFIER);
			State = 55; Match(T__1);
			State = 59;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 56; Match(IDENTIFIER);
				}
				}
				State = 61;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 62; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		public ITerminalNode POINT() { return GetToken(mapParser.POINT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(mapParser.IDENTIFIER, 0); }
		public LatitudeContext latitude() {
			return GetRuleContext<LatitudeContext>(0);
		}
		public LongitudeContext longitude() {
			return GetRuleContext<LongitudeContext>(0);
		}
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(POINT);
			State = 65; Match(IDENTIFIER);
			State = 66; latitude();
			State = 67; longitude();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LatitudeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(mapParser.INTEGER, 0); }
		public LatitudeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_latitude; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLatitude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLatitude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLatitude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LatitudeContext latitude() {
		LatitudeContext _localctx = new LatitudeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_latitude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongitudeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(mapParser.INTEGER, 0); }
		public LongitudeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longitude; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterLongitude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitLongitude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongitude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongitudeContext longitude() {
		LongitudeContext _localctx = new LongitudeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_longitude);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoadContext : ParserRuleContext {
		public ITerminalNode ROADTYPE() { return GetToken(mapParser.ROADTYPE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(mapParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(mapParser.IDENTIFIER, i);
		}
		public LatitudeContext[] latitude() {
			return GetRuleContexts<LatitudeContext>();
		}
		public LatitudeContext latitude(int i) {
			return GetRuleContext<LatitudeContext>(i);
		}
		public LongitudeContext[] longitude() {
			return GetRuleContexts<LongitudeContext>();
		}
		public LongitudeContext longitude(int i) {
			return GetRuleContext<LongitudeContext>(i);
		}
		public RoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_road; } }
		public override void EnterRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.EnterRoad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ImapListener typedListener = listener as ImapListener;
			if (typedListener != null) typedListener.ExitRoad(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ImapVisitor<TResult> typedVisitor = visitor as ImapVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoadContext road() {
		RoadContext _localctx = new RoadContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_road);
		try {
			State = 84;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(ROADTYPE);
				State = 74; Match(IDENTIFIER);
				State = 75; latitude();
				State = 76; longitude();
				State = 77; latitude();
				State = 78; longitude();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; Match(ROADTYPE);
				State = 81; Match(IDENTIFIER);
				State = 82; Match(IDENTIFIER);
				State = 83; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xFY\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x3\x2\a\x2\x16\n\x2\f\x2\xE\x2\x19\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\"\n\x3\x3\x4\x3\x4\a\x4&\n\x4\f\x4\xE\x4"+
		")\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x31\n\x5\f\x5\xE\x5\x34"+
		"\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6<\n\x6\f\x6\xE\x6?\v\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\nW\n\n\x3\n\x2\x2\x2\v\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x2\x2X\x2\x17\x3\x2"+
		"\x2\x2\x4!\x3\x2\x2\x2\x6#\x3\x2\x2\x2\b,\x3\x2\x2\x2\n\x37\x3\x2\x2\x2"+
		"\f\x42\x3\x2\x2\x2\xEG\x3\x2\x2\x2\x10I\x3\x2\x2\x2\x12V\x3\x2\x2\x2\x14"+
		"\x16\x5\x4\x3\x2\x15\x14\x3\x2\x2\x2\x16\x19\x3\x2\x2\x2\x17\x15\x3\x2"+
		"\x2\x2\x17\x18\x3\x2\x2\x2\x18\x1A\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x1A"+
		"\x1B\a\x2\x2\x3\x1B\x3\x3\x2\x2\x2\x1C\"\x5\f\a\x2\x1D\"\x5\x12\n\x2\x1E"+
		"\"\x5\b\x5\x2\x1F\"\x5\n\x6\x2 \"\x5\x6\x4\x2!\x1C\x3\x2\x2\x2!\x1D\x3"+
		"\x2\x2\x2!\x1E\x3\x2\x2\x2!\x1F\x3\x2\x2\x2! \x3\x2\x2\x2\"\x5\x3\x2\x2"+
		"\x2#\'\a\x3\x2\x2$&\a\r\x2\x2%$\x3\x2\x2\x2&)\x3\x2\x2\x2\'%\x3\x2\x2"+
		"\x2\'(\x3\x2\x2\x2(*\x3\x2\x2\x2)\'\x3\x2\x2\x2*+\a\x3\x2\x2+\a\x3\x2"+
		"\x2\x2,-\a\a\x2\x2-.\a\f\x2\x2.\x32\a\x4\x2\x2/\x31\a\f\x2\x2\x30/\x3"+
		"\x2\x2\x2\x31\x34\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2"+
		"\x33\x35\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x35\x36\a\x5\x2\x2\x36\t\x3\x2"+
		"\x2\x2\x37\x38\a\b\x2\x2\x38\x39\a\f\x2\x2\x39=\a\x4\x2\x2:<\a\f\x2\x2"+
		";:\x3\x2\x2\x2<?\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>@\x3\x2\x2\x2"+
		"?=\x3\x2\x2\x2@\x41\a\x5\x2\x2\x41\v\x3\x2\x2\x2\x42\x43\a\t\x2\x2\x43"+
		"\x44\a\f\x2\x2\x44\x45\x5\xE\b\x2\x45\x46\x5\x10\t\x2\x46\r\x3\x2\x2\x2"+
		"GH\a\n\x2\x2H\xF\x3\x2\x2\x2IJ\a\n\x2\x2J\x11\x3\x2\x2\x2KL\a\x6\x2\x2"+
		"LM\a\f\x2\x2MN\x5\xE\b\x2NO\x5\x10\t\x2OP\x5\xE\b\x2PQ\x5\x10\t\x2QW\x3"+
		"\x2\x2\x2RS\a\x6\x2\x2ST\a\f\x2\x2TU\a\f\x2\x2UW\a\f\x2\x2VK\x3\x2\x2"+
		"\x2VR\x3\x2\x2\x2W\x13\x3\x2\x2\x2\b\x17!\'\x32=V";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TKIK.Language
